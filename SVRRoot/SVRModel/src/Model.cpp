#include <model/Model.hpp>
#include <model/Ensemble.hpp>
#include "onlinesvr.hpp"

#include <appcontext.hpp>

namespace svr {
namespace datamodel {

bool Model::operator==(Model const &o) const
{
    return ensemble.get_id() == o.ensemble.get_id() && decon_level == o.decon_level
           && learning_levels == o.learning_levels && last_modified == o.last_modified
           && last_modeled_value_time == o.last_modeled_value_time && svr_model && o.svr_model &&
           *svr_model == *o.svr_model;
}

Model::Model(bigint id, bigint ensemble_id, size_t decon_level, const std::set<size_t> &learning_levels,
             OnlineMIMOSVR_ptr svr_model, bpt::ptime const &last_modified,
             bpt::ptime const &last_modeled_value_time
)
        : Entity(id),
          ensemble(ensemble_id),
          decon_level(decon_level),
          learning_levels(learning_levels),
          svr_model(svr_model),
          last_modified(last_modified),
          last_modeled_value_time(last_modeled_value_time)
{
}

void Model::reset()
{
    this->last_modeled_value_time = bpt::min_date_time;
    this->last_modified = bpt::min_date_time;
    this->svr_model.reset();
    ensemble = ensemble_relation();

}

std::vector<size_t> Model::get_sub_vector_indices() const
{
    std::vector<size_t> sub_vector_indices;
    size_t cur_index = 0;
    for (const auto learning_level: learning_levels) {
        (void) learning_level;
        sub_vector_indices.push_back(cur_index);
        cur_index += svr_model->get_svr_parameters().get_lag_count();
    }
    // TODO Implement aux columns

    // Last 24 + 7 + 31 + 12 columns are one hot encoded time features as generated by ModelService::prepare_time_features()

    return sub_vector_indices;
}

/** Get ensemble database ID this model is part of */
bigint Model::get_ensemble_id() const
{
    return ensemble.get_id();
}

/** Change the ensemble this model is part of
 * \param ensemble_id Database ensemble ID this model is to become part of.
 */
void Model::set_ensemble_id(const bigint ensemble_id)
{
    this->ensemble.set_id(ensemble_id);
}

/** Get the wavelet deconstruction level this model is predicting. */
size_t Model::get_decon_level() const
{
    return decon_level;
}

/** Set the decon level this model is predicting */
void Model::set_decon_level(const size_t decon_level)
{
    this->decon_level = decon_level;
}

/** Get training wavelet deconstruction level indexes this model is trained against. */
std::set<size_t> Model::get_learning_levels() const
{
    return learning_levels;
}

/** Set learning wavelet deconstruction level indexes this model is trained against. */
void Model::set_learning_levels(const std::set<size_t> &learning_levels)
{
    this->learning_levels = learning_levels;
}

/** Get pointer to an OnlineSVR model instance */
OnlineMIMOSVR_ptr &Model::get_svr_model()
{
    return svr_model;
}

OnlineMIMOSVR_ptr Model::get_svr_model() const
{
    return svr_model;
}

/** Set member svr model point to a OnlineSVR instance
 * \param svr_model new OnlineSVR instance
 */
void Model::set_svr_model(OnlineMIMOSVR_ptr svr_model)
{
    this->svr_model = svr_model;
}

/** Get last time model was updated */
bpt::ptime const &Model::get_last_modified() const
{
    return last_modified;
}

/** Set time model was last updated
 * \param last_modified time model was last modified
 */
void Model::set_last_modified(bpt::ptime const &last_modified)
{
    this->last_modified = last_modified;
}

/** Get value time of the latest row this model was trained against. */
bpt::ptime const &Model::get_last_modeled_value_time() const
{
    return last_modeled_value_time;
}

/** Set value time of the latest row this model was trained against. */
void Model::set_last_modeled_value_time(const bpt::ptime &last_modeled_value_time)
{
    this->last_modeled_value_time = last_modeled_value_time;
}

std::string Model::to_string() const
{
    std::stringstream ss;
    ss << "Model ID " << get_id()
       << ", ensemble ID " << get_ensemble_id()
       << ", decon level " << get_decon_level()
       << ", learning levels " << common::deep_to_string(learning_levels)
       << ", last modified time " << bpt::to_simple_string(get_last_modified())
       << ", last modeled value time " << bpt::to_simple_string(get_last_modeled_value_time());
    return ss.str();
}

}
}
