INCLUDE(cmake/Util.cmake)
INCLUDE_DIRECTORIES(/usr/include/x86_64-linux-gnu/openmpi)
UNSET(ENV{CUDAHOSTCXX} CACHE)
UNSET(ENV{CUDAFLAGS} CACHE)
UNSET(ENV{CFLAGS} CACHE)
UNSET(ENV{CXXFLAGS} CACHE)
UNSET(ENV{LDFLAGS} CACHE)
SET(CXX_STANDARD "20" CACHE STRING "C++ standard")
SET(C_STANDARD "17" CACHE STRING "C standard")
SET(CMAKE_CXX_STANDARD ${CXX_STANDARD})
SET(CMAKE_C_STANDARD ${C_STANDARD})
SET(POSITION_INDEPENDENT_CODE ON)
OPTION(USE_CUDA "Compile for CUDA system (required)." ON)
IF (USE_CUDA)
    SET(CMAKE_POSITION_INDEPENDENT_CODE ON CACHE BOOL "Enable position independent code")
    SET(BUILD_SHARED_LIBS ON CACHE BOOL "Build shared libraries")
    SET(CMAKE_CUDA_HOST_COMPILER "g++" CACHE STRING "Usually its GNU compiler that NVidia supports officially.")
    SET(CUDA_HOST_COMPILER ${CMAKE_CUDA_HOST_COMPILER})
    SET(CMAKE_CUDA_STANDARD ${CXX_STANDARD} CACHE STRING "C++ standard")
    SET(CMAKE_CUDA_SEPARABLE_COMPILATION ON CACHE BOOL "CUDA Separable compilation") # Relocatable device code
    SET(CUDA_RESOLVE_DEVICE_SYMBOLS ON CACHE BOOL "CUDA resolve device symbols")
    SET(CMAKE_CUDA_STANDARD_REQUIRED ON CACHE BOOL "CMAKE_CUDA_STANDARD_REQUIRED")
    SET(CMAKE_CUDA_EXTENSIONS ON CACHE BOOL "CMAKE_CUDA_EXTENSIONS")
    SET(CUDA_USE_STATIC_RUNTIME ON CACHE BOOL "CUDA_USE_STATIC_RUNTIME")
ENDIF ()
SET_PROPERTY(GLOBAL PROPERTY COMPILE_OPTIONS "")
SET_PROPERTY(GLOBAL PROPERTY LINK_OPTIONS "")
SET(ONEAPI_ROOT "$ENV{ONEAPI_ROOT}" CACHE STRING "Intel ONEAPI root directory")
CMAKE_MINIMUM_REQUIRED(VERSION 3.10)
FIND_PROGRAM(PROGRAM_CCACHE ccache)
IF (PROGRAM_CCACHE)
    SET(CMAKE_CXX_COMPILER_LAUNCHER ${PROGRAM_CCACHE})
    SET(CMAKE_C_COMPILER_LAUNCHER ${PROGRAM_CCACHE})
    SET(CMAKE_CUDA_COMPILER_LAUNCHER ${PROGRAM_CCACHE})
ENDIF ()
OPTION(USE_LLD "Use LLD linker, instead of default (usually BFD)" ON)
OPTION(USE_INTEL_COMPILER "Use Intel's ICX compiler" OFF)
OPTION(USE_MKL_MALLOC "Use Intel MKL malloc" OFF)
IF(USE_MKL_MALLOC)
    ADD_COMPILE_DEFINITIONS(USE_MKL_MALLOC ARMA_USE_MKL_ALLOC)
ENDIF ()

FIND_PROGRAM(PROGRAM_ICPX icpx)
IF (PROGRAM_ICPX AND USE_INTEL_COMPILER)
    MESSAGE("Found Intel compiler at ${PROGRAM_ICPX}")
    IF (USE_CUDA AND CMAKE_CUDA_HOST_COMPILER MATCHES icpx)
        SET(CMAKE_CUDA_FLAGS -allow-unsupported-compiler)
        SET(CMAKE_CUDA_COMPILER_WORKS ON)
        MESSAGE(WARNING "Intel compiler doesn't support CUDA, will try compiling in hybrid mode with GCC but LTO may not work.")
    ENDIF ()
    SET(CMAKE_CXX_COMPILER ${PROGRAM_ICPX} CACHE STRING "" FORCE)
    FIND_PROGRAM(PROGRAM_ICX icx REQUIRED)
    SET(CMAKE_C_COMPILER ${PROGRAM_ICX} CACHE STRING "" FORCE)
    CMAKE_PATH(GET PROGRAM_ICX PARENT_PATH ICX_DIR)
    IF (USE_LLD)
        SET(CMAKE_LINKER "${ICX_DIR}/compiler/ld.lld")
    ENDIF ()
ELSE ()
    SET(CMAKE_CXX_COMPILER g++ CACHE STRING "CMAKE_CXX_COMPILER")
    SET(CMAKE_C_COMPILER gcc CACHE STRING "CMAKE_C_COMPILER")
ENDIF ()

IF (USE_CUDA)
    PROJECT(SVR LANGUAGES CXX CUDA)
ELSE ()
    PROJECT(SVR CXX)
ENDIF ()

INCLUDE(ProcessorCount)
PROCESSORCOUNT(NCPU)
SET(CMAKE_PEDANTIC_FLAGS -pedantic -Wall -Werror)
SET(ENABLE_OMP_OFFLOAD OFF CACHE BOOL "Enable Intel OMP offload")
SET(ENABLE_BLACS ON CACHE BOOL "Enable Intel BLACS (required for Intel MKL)")
SET(USE_LTO OFF CACHE BOOL "Use LTO, problematic when using Intel compiler along with GCC (needed for CUDA)")
SET(CPU_VECTOR_WIDTH 128 CACHE STRING "ICX mprefer-vector-width option argument, 128 for AVX2 and 256 for AVX512")
SET(INLINE_INSTR_LIMIT 6000 CACHE STRING "Inline instructions limit for GCC")
SET(MEM_ALIGN 32 CACHE STRING "Default memory alignment")

IF (WIN32 OR CYGWIN)
    ADD_COMPILE_DEFINITIONS(DGTEST_OS_CYGWIN=1)
ENDIF ()

SET(COMPILER_EXTENSIONS -fPIC -std=c++${CXX_STANDARD})
SET(COMPILER_EXTENSIONS_CC -std=c${C_STANDARD}) # Deprecated -fcilkplus -lcilkrts
SET(COMPILER_EXTENSIONS_ICX -fdiagnostics-color=always -qopenmp -fopenmp-version=51 -stdlib=libstdc++ -Wno-unused-command-line-argument -Wno-embedded-directive -Wno-pass-failed -Wno-unsupported-floating-point-opt -fdiagnostics-show-option -pc80 -fhonor-infinities -fhonor-nans -fhonor-nan-compares -no-ftz)
SET(COMPILER_EXTENSIONS_GCC -flarge-source-files -fopenmp -ggdb -mno-daz-ftz)
IF (USE_LTO)
    SET(CMAKE_INTERPROCEDURAL_OPTIMIZATION ON)
    LIST(APPEND COMPILER_EXTENSIONS_ICX -flto=full -funified-lto)
    IF (USE_LLD)
        LIST(APPEND COMPILER_EXTENSIONS_ICX -Wl,--fat-lto-objects)
    ENDIF ()
    # LIST(APPEND COMPILER_EXTENSIONS_GCC -flto) # Crashes calls to cufft
ENDIF ()

# UNSET(CXX_OPTIMIZATION_FLAGS COMMON_OPTIMIZATION_FLAGS_GCC COMMON_OPTIMIZATION_FLAGS_ICX LINKER_OPTIMIZATION_FLAGS LINKER_OPTIMIZATION_FLAGS_GCC LINKER_OPTIMIZATION_FLAGS_ICX)
IF (CMAKE_BUILD_TYPE MATCHES "Rel")
    LIST(APPEND CXX_OPTIMIZATION_FLAGS -march=native -mtune=native -m64 -mstackrealign -mmovbe -malign-double -mfpmath=sse -funroll-loops -fno-trapping-math -fno-signed-zeros -fassociative-math -ffp-contract=fast -O3 -mcmodel=large -pipe) # Intel linker crash with -fsplit-stack
    LIST(APPEND COMMON_OPTIMIZATION_FLAGS_GCC -fno-semantic-interposition -fbranch-target-load-optimize -fbranch-target-load-optimize2 -finline-limit=${INLINE_INSTR_LIMIT} -fprefetch-loop-arrays -fmerge-all-constants -ftree-loop-ivcanon -fivopts -fgcse-sm -fgcse-las -mfma -fearly-inlining -fipa-pta -fsched-pressure -floop-nest-optimize -ftree-vectorize -floop-block -floop-strip-mine -fsched-spec-load -fno-math-errno -fallow-store-data-races -fvect-cost-model=unlimited -fgraphite-identity -fno-semantic-interposition) # Kills a bit of precision -funsafe-math-optimizations
    LIST(APPEND COMMON_OPTIMIZATION_FLAGS_ICX -qopt-prefetch -qopt-dynamic-align -fvec-peel-loops -fvec-remainder-loops -fvec-with-mask -vec-threshold=0 -qopt-multiple-gather-scatter-by-shuffles -qopt-mem-layout-trans=4 -fdiagnostics-show-option -mprefer-vector-width=${CPU_VECTOR_WIDTH} -fslp-vectorize -fjump-tables -fma -Wno-overriding-option -fp-model=precise -fp-speculation=safe -fimf-use-svml=true -mbranches-within-32B-boundaries -vec -finline -qopt-matmul -qopt-jump-tables)
    IF (ENABLE_OMP_OFFLOAD)
        LIST(APPEND COMMON_OPTIMIZATION_FLAGS_ICX -fopenmp-target-loopopt -fopenmp-target-buffers=4GB -fopenmp-targets=spir64 -fopenmp-concurrent-host-device-compile) # Crashes linker -fopenmp-target-simd, # Is this correct? -fopenmp-targets=spir64_x86_64
        LIST(APPEND LINKER_OPTIMIZATION_FLAGS_ICX --offload-new-driver -fsycl -lsycl -Xopenmp-target-backend=spir64_x86_64 "-device=cpu -march=sse4.2") # --offload-arch=v100+test
    ENDIF ()
    LIST(APPEND CXX_OPTIMIZATION_FLAGS_GCC ${COMMON_OPTIMIZATION_FLAGS_GCC})
    LIST(APPEND CXX_OPTIMIZATION_FLAGS_ICX ${COMMON_OPTIMIZATION_FLAGS_ICX} -inline-level=2) # -ffp-eval-method=extended
    LIST(APPEND LINKER_OPTIMIZATION_FLAGS -O3)
    LIST(APPEND LINKER_OPTIMIZATION_FLAGS_GCC ${COMMON_OPTIMIZATION_FLAGS_GCC} -fwhole-program)
    LIST(APPEND LINKER_OPTIMIZATION_FLAGS_ICX ${COMMON_OPTIMIZATION_FLAGS_ICX} -qopenmp-link=static -Wl,-z,muldefs -static-intel) # -static-libstdc++ not supported with -fsycl
    IF (USE_LLD)
        LIST(APPEND LINKER_OPTIMIZATION_FLAGS_ICX -Wl,--icf=safe -Wl,--apply-dynamic-relocs)
    ENDIF ()
    IF (USE_LTO)
        IF (USE_LLD)
            LIST(APPEND LINKER_OPTIMIZATION_FLAGS_ICX -Wl,--lto=full -Wl,--no-lto-legacy-pass-manager -Wl,--lto-CGO3 -Wl,--lto-O3 -Wl,--lto-whole-program-visibility) # -Wl,--no-fat-lto-objects
        ENDIF ()
        LIST(APPEND LINKER_OPTIMIZATION_FLAGS_GCC -flto-partition=one -fdevirtualize-at-ltrans)
    ENDIF ()
    SET($ENV {MKL_ENABLE_INSTRUCTIONS} "AVX2")
    ADD_COMPILE_DEFINITIONS(NDEBUG)
ELSEIF (CMAKE_BUILD_TYPE MATCHES "Debug")
    SET(CMAKE_FIND_DEBUG_MODE ON)
    IF (USE_LTO)
        MESSAGE(FATAL_ERROR "LTO is not supported in Debug mode.")
    ENDIF ()
    # SET(LSAN_BLACKLIST "lsan-blacklist.txt" CACHE STRING "")
    # SET(UBSAN_BLACKLIST "ubsan-blacklist.txt" CACHE STRING "")
    SET(SANITIZE "" CACHE STRING "bounds-strict,undefined,float-cast-overflow,signed-integer-overflow,pointer-overflow,address,thread,undefined")
    LIST(APPEND COMPILER_EXTENSIONS_ICX -fimf-precision=high) # Too verbose -qnextgen-diag
    LIST(APPEND CXX_OPTIMIZATION_FLAGS -DDEBUG_BUILD -ggdb -fno-omit-frame-pointer -fstack-protector-all -fstack-clash-protection) # -fsanitize-blacklist=${LSAN_BLACKLIST}
    LIST(APPEND CXX_OPTIMIZATION_FLAGS_ICX -debug extended -g3 -fp-model=strict -pc80 -fimf-precision=high -fimf-use-svml=false -fstack-security-check)
    LIST(APPEND CXX_OPTIMIZATION_FLAGS_GCC -fharden-compares -fharden-conditional-branches -finstrument-functions -fvtv-debug) # -fvtable-verify=std
    LIST(APPEND LINKER_OPTIMIZATION_FLAGS) # Memory profilers -lduma -ldmallocthcxx -ldmallocthcxx
    LIST(APPEND LINKER_OPTIMIZATION_FLAGS_ICX -debug extended -g3)
    OPTION(DEBUG_GLIBC "Use debug Glibc" OFF)
    IF(DEBUG_GLIBC)
        ADD_COMPILE_DEFINITIONS(_GLIBCXX_DEBUG _GLIBCXX_DEBUG_PEDANTIC _GLIBCXX_DEBUG_BACKTRACE)
    ENDIF()
    LINK_LIBRARIES(sycl stdc++exp)
ENDIF ()

IF (USE_LLD)
    LIST(APPEND LINKER_OPTIMIZATION_FLAGS -fuse-ld=lld)
ENDIF ()

OPTION(USE_INTEL_OPENMP "Use Intel OpenMP" OFF)
IF (USE_INTEL_OPENMP)
    LIST(APPEND LINKER_OPTIMIZATION_FLAGS -liomp5)
    LIST(APPEND COMPILER_EXTENSIONS_ICX -fopenmp=libiomp5)
ENDIF ()

FIND_PROGRAM(PROGRAM_MOLD mold)
OPTION(USE_MOLD "Use Mold linker" OFF)
IF (PROGRAM_MOLD AND USE_MOLD)
    MESSAGE("Found Mold linker at ${PROGRAM_MOLD}, using it with GCC only.")
    LIST(APPEND LINKER_OPTIMIZATION_FLAGS_GCC -fuse-ld=mold) # Mold doesn't work with Intel
ENDIF ()

IF (SANITIZE)
    LIST(APPEND CXX_OPTIMIZATION_FLAGS -fno-common -fsanitize=${SANITIZE} -fsanitize-recover=all)
    LIST(APPEND CXX_OPTIMIZATION_FLAGS_GCC --param=max-vartrack-size=100000000)
    LIST(APPEND LINKER_OPTIMIZATION_FLAGS -fsanitize=${SANITIZE})
    LIST(APPEND LINKER_OPTIMIZATION_FLAGS_GCC -static-libasan -static-libubsan -fsanitize=${SANITIZE})
    LIST(APPEND LINKER_OPTIMIZATION_FLAGS_ICX -static-libsan)
    SET($ENV{ASAN_OPTIONS} "protect_shadow_gap=0:replace_intrin=1:detect_leaks=1")
    ADD_COMPILE_DEFINITIONS(SANITIZE=${SANITIZE})
ENDIF ()

OPTION(USE_CLANG_TIDY OFF "Run Clang-Tidy static code analysis")
IF (USE_CLANG_TIDY)
    SET(CMAKE_CXX_CLANG_TIDY ${ONEAPI_ROOT}/compiler/latest/bin/compiler/clang-tidy;--use-color;-format-style='file';-header-filter=${CMAKE_CURRENT_SOURCE_DIR};-checks=boost-*,modernize-*,mpi-*,openmp-*,performance-*,misc-*,concurrency-*,clang-analyzer-*,cert-*,bugprone-*,cppcoreguidelines-*;--export-fixes=${CMAKE_CURRENT_SOURCE_DIR}/build-fixes.yaml)
ENDIF ()

OPTION(USE_CPPCHECK OFF "Run CppCheck static code analysis")
IF (USE_CPPCHECK)
    EXECUTE_PROCESS(COMMAND cpp -H -v /dev/null -o /dev/null OUTPUT_VARIABLE BUILTIN_INCLUDES ERROR_VARIABLE BUILTIN_INCLUDES)
    STRING(REGEX REPLACE ".*search starts here:([^:]+)\nEnd of search.*" "\\1" BUILTIN_INCLUDES ${BUILTIN_INCLUDES})
    STRING(REGEX REPLACE "\n *" " -I" BUILTIN_INCLUDES ${BUILTIN_INCLUDES})
    SEPARATE_ARGUMENTS(BUILTIN_INCLUDES)
    FILE(GLOB_RECURSE FOUND_INCLUDES LIST_DIRECTORIES true "/usr/include/c++" "/usr/include/clang" "${ONEAPI_ROOT}/compiler/latest/opt/compiler/include")
    FOREACH (FF ${FOUND_INCLUDES})
        IF (IS_DIRECTORY ${FF})
            LIST(APPEND BUILTIN_INCLUDES "-I${FF}")
        ENDIF ()
    ENDFOREACH ()
    MESSAGE("Found built-in include paths: ${BUILTIN_INCLUDES}")
    FIND_PROGRAM(CPPCHECK_EXE NAMES cppcheck REQUIRED)
    SET(cppcheck_opts --enable=all --inline-suppr --quiet --file-filter=${CMAKE_SOURCE_DIR}/SVRRoot/* --suppressions-list=${CMAKE_SOURCE_DIR}/cppcheck.supp ${BUILTIN_INCLUDES})
    SET(CMAKE_C_CPPCHECK ${CPPCHECK_EXE} --std=c${C_STANDARD} ${cppcheck_opts})
    SET(CMAKE_CXX_CPPCHECK ${CPPCHECK_EXE} --std=c++${CXX_STANDARD} ${cppcheck_opts})
ENDIF ()


ADD_COMPILE_DEFINITIONS(MEM_ALIGN=${MEM_ALIGN} BOOST_ALL_DYN_LINK BOOST_STACKTRACE_USE_ADDR2LINE ARMA_ALLOW_FAKE_GCC SVR_ENABLE_DEBUGGING BOOST_MATH_NO_LONG_DOUBLE_MATH_FUNCTIONS=1 MAGMA_NOWARNING EIGEN_USE_MKL_ALL) # ARMA_USE_FFTW3

OPTION(PRODUCTION_BUILD "Generate maximum performance build for use in well tested production setting." OFF)
IF (PRODUCTION_BUILD)
    ADD_COMPILE_DEFINITIONS(COOT_NO_DEBUG ARMA_NO_DEBUG PRODUCTION_BUILD NDEBUG)
ELSE ()
    LIST(PREPEND CXX_OPTIMIZATION_FLAGS_ICX -g3 -debug extended)
ENDIF ()

OPTION(VALGRIND_BUILD "Build for testing with Valgrind" OFF)
IF (VALGRIND_BUILD)
    ADD_COMPILE_DEFINITIONS(VALGRIND_BUILD)
ENDIF ()

OPTION(PROFILE_OPTIMIZE "Generate profiling instrumentation code" OFF)
IF (PROFILE_OPTIMIZE)
    LIST(PREPEND COMPILER_EXTENSIONS_ICX -fprofile-sample-generate -debug extended -g3)
    LIST(PREPEND COMPILER_EXTENSIONS_GCC -fprofile-generate -fauto-profile -ftracer)
    LIST(APPEND COMPILER_EXTENSIONS -fno-omit-frame-pointer)
ELSE ()
    IF (CMAKE_BUILD_TYPE MATCHES "Rel")
        LIST(APPEND COMPILER_EXTENSIONS -fomit-frame-pointer)
    ENDIF ()
ENDIF ()

OPTION(USE_INTERNAL_PROFILER "Use internal function profiler." OFF)
IF (USE_INTERNAL_PROFILER)
    ADD_COMPILE_DEFINITIONS(PROFILE_CALLS)
ENDIF ()

IF (USE_INTEL_COMPILER)
    FOREACH (OPT IN LISTS CMAKE_PEDANTIC_FLAGS COMPILER_EXTENSIONS COMPILER_EXTENSIONS_ICX CXX_OPTIMIZATION_FLAGS CXX_OPTIMIZATION_FLAGS_ICX)
        ADD_COMPILE_OPTIONS("$<$<COMPILE_LANGUAGE:CXX>:${OPT}>")
    ENDFOREACH ()
    FOREACH (OPT IN LISTS CMAKE_PEDANTIC_FLAGS COMPILER_EXTENSIONS_CC COMPILER_EXTENSIONS_ICX CXX_OPTIMIZATION_FLAGS CXX_OPTIMIZATION_FLAGS_ICX)
        ADD_COMPILE_OPTIONS("$<$<COMPILE_LANGUAGE:C>:${OPT}>")
    ENDFOREACH ()
    FOREACH (OPT IN LISTS CMAKE_PEDANTIC_FLAGS COMPILER_EXTENSIONS COMPILER_EXTENSIONS_ICX LINKER_OPTIMIZATION_FLAGS LINKER_OPTIMIZATION_FLAGS_ICX CXX_OPTIMIZATION_FLAGS)
        ADD_LINK_OPTIONS("$<$<COMPILE_LANGUAGE:CXX>:${OPT}>")
    ENDFOREACH ()
    FOREACH (OPT IN LISTS CMAKE_PEDANTIC_FLAGS COMPILER_EXTENSIONS_CC COMPILER_EXTENSIONS_ICX LINKER_OPTIMIZATION_FLAGS LINKER_OPTIMIZATION_FLAGS_ICX CXX_OPTIMIZATION_FLAGS)
        ADD_LINK_OPTIONS("$<$<COMPILE_LANGUAGE:C>:${OPT}>")
    ENDFOREACH ()
ELSE ()
    SET(ENABLE_OMP_OFFLOAD OFF)
    FOREACH (OPT IN LISTS CMAKE_PEDANTIC_FLAGS COMPILER_EXTENSIONS COMPILER_EXTENSIONS_GCC CXX_OPTIMIZATION_FLAGS CXX_OPTIMIZATION_FLAGS_GCC)
        ADD_COMPILE_OPTIONS("$<$<COMPILE_LANGUAGE:CXX>:${OPT}>")
    ENDFOREACH ()
    FOREACH (OPT IN LISTS CMAKE_PEDANTIC_FLAGS COMPILER_EXTENSIONS_CC COMPILER_EXTENSIONS_GCC CXX_OPTIMIZATION_FLAGS CXX_OPTIMIZATION_FLAGS_GCC)
        ADD_COMPILE_OPTIONS("$<$<COMPILE_LANGUAGE:C>:${OPT}>")
    ENDFOREACH ()
    FOREACH (OPT IN LISTS CMAKE_PEDANTIC_FLAGS COMPILER_EXTENSIONS COMPILER_EXTENSIONS_GCC LINKER_OPTIMIZATION_FLAGS LINKER_OPTIMIZATION_FLAGS_GCC CXX_OPTIMIZATION_FLAGS)
        ADD_LINK_OPTIONS("$<$<COMPILE_LANGUAGE:CXX>:${OPT}>")
    ENDFOREACH ()
    FOREACH (OPT IN LISTS CMAKE_PEDANTIC_FLAGS COMPILER_EXTENSIONS_CC COMPILER_EXTENSIONS_GCC LINKER_OPTIMIZATION_FLAGS LINKER_OPTIMIZATION_FLAGS_GCC CXX_OPTIMIZATION_FLAGS)
        ADD_LINK_OPTIONS("$<$<COMPILE_LANGUAGE:C>:${OPT}>")
    ENDFOREACH ()
ENDIF ()

FIND_PACKAGE(PkgConfig REQUIRED)
# FIND_PACKAGE(absl REQUIRED)

PKG_CHECK_MODULES(PETSC PETSc)
IF (PETSC_FOUND)
    FIND_PACKAGE(MPI REQUIRED)
    FOREACH (OPT IN LISTS PETSC_LDFLAGS)
        IF (OPT MATCHES "-fopenmp")
            CONTINUE()
        ENDIF ()
        ADD_LINK_OPTIONS("$<$<COMPILE_LANGUAGE:CXX>:${OPT}>")
        ADD_LINK_OPTIONS("$<$<COMPILE_LANGUAGE:C>:${OPT}>")
    ENDFOREACH ()
    INCLUDE_DIRECTORIES(${PETSC_INCLUDE_DIRS})
    MESSAGE("PETSc link flags ${PETSC_LDFLAGS}, compiler flags ${PETSC_CFLAGS}.")
    LINK_LIBRARIES(${PETSC_LINK_LIBRARIES} ${MPI_CXX_LIBRARIES})
ENDIF ()

OPTION(USE_KNITRO "Use Alterys KNitro" OFF)
IF (USE_KNITRO)
    SET(KNITRODIR /opt/knitro CACHE STRING "KNitro install directory")
    LINK_DIRECTORIES(${KNITRODIR}/lib)
    LINK_LIBRARIES(knitro)
    INCLUDE_DIRECTORIES(${KNITRODIR}/include)
    ADD_COMPILE_DEFINITIONS(USE_KNITRO)
ENDIF ()

FILE(GLOB_RECURSE PERF_DATA_FILES FOLLOW_SYMLINKS "*.perf.data")
FOREACH (PERF_DATA IN LISTS PERF_DATA_FILES)
    IF (EXISTS ${PERF_DATA} AND EXISTS ${PERF_DATA}.freq.prof AND EXISTS ${PERF_DATA}.misp.prof)
        MESSAGE("Found perf data in ${PERF_DATA}")
        ADD_COMPILE_OPTIONS("$<$<COMPILE_LANGUAGE:CXX>:-fprofile-sample-use=${PERF_DATA}.freq.prof>")
        ADD_COMPILE_OPTIONS("$<$<COMPILE_LANGUAGE:CXX>:-mllvm>")
        ADD_COMPILE_OPTIONS("$<$<COMPILE_LANGUAGE:CXX>:-unpredictable-hints-file=${PERF_DATA}.misp.prof>")
        ADD_COMPILE_OPTIONS("$<$<COMPILE_LANGUAGE:C>:-fprofile-sample-use=${PERF_DATA}.freq.prof -mllvm -unpredictable-hints-file=${PERF_DATA}.misp.prof>")
        ADD_COMPILE_OPTIONS("$<$<COMPILE_LANGUAGE:CUDA>:-Xcompiler=-fprofile-use=${PERF_DATA}.freq.prof -unpredictable-hints-file=${PERF_DATA}.misp.prof>")
    ELSE ()
        MESSAGE("Complete perf data not found in ${PERF_DATA}, ${PERF_DATA}.freq.prof and ${PERF_DATA}.misp.prof")
    ENDIF ()
ENDFOREACH ()
OPTION(USE_IPP "Use Intel Performance Primitives" ON)
IF (USE_IPP)
    SET(IPP_SHARED OFF)
    FIND_PACKAGE(IPP REQUIRED) # Do not double link in multiple so's or freeze on init
    ADD_COMPILE_DEFINITIONS(USE_IPP)
ENDIF ()

if (USE_CUDA)
    ENABLE_LANGUAGE(CUDA)
    FIND_PACKAGE(CUDAToolkit)
    ADD_COMPILE_DEFINITIONS(USE_CUDA)
    SET(CUDA_ARCHITECTURES "70" CACHE STRING "List of CUDA architectures (e.g. Pascal, Volta, etc) or \
                                        compute capability versions (6.1, 7.0, etc) to generate code for. \
                                        Set to Auto for automatic detection (default)."
    )
    SET(CMAKE_CUDA_RUNTIME_LIBRARY "static" CACHE STRING "CMAKE_CUDA_RUNTIME_LIBRARY")
    IF (CUDA_ARCHITECTURES)
        SET(CMAKE_CUDA_ARCHITECTURES ${CUDA_ARCHITECTURES})
    ENDIF ()
    LINK_DIRECTORIES(${CUDAToolkit_LIBRARY_DIR})
    INCLUDE_DIRECTORIES(${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES} ${CUDAToolkit_INCLUDE_DIRS})
    SET(CMAKE_CUDA_COMPILER "nvcc" CACHE STRING "CUDA compiler")
    SET(COMPILER_EXTENSIONS_CUDA --use-local-env --restrict --gpu-architecture=compute_${CUDA_ARCHITECTURES} --gpu-code=sm_${CUDA_ARCHITECTURES} -ccbin=${CUDA_HOST_COMPILER} --expt-relaxed-constexpr -Wno-deprecated-gpu-targets --forward-unknown-opts -allow-unsupported-compiler --extended-lambda --default-stream=per-thread --std=c++${CXX_STANDARD} --threads=${NCPU}) # -device-entity-has-hidden-visibility false
    LIST(APPEND LINK_FLAGS_CUDA -Wnvlink,-w --extra-warnings --warning-as-error)
    IF (BUILD_SHARED_LIBS)
        LIST(APPEND LINK_FLAGS_CUDA --shared)
    ENDIF ()
    IF (CMAKE_BUILD_TYPE MATCHES "Rel")
        LIST(APPEND COMPILER_EXTENSIONS_CUDA --std=c++${CXX_STANDARD} -O3 --dopt=on -lineinfo --extra-device-vectorization --fmad=true --prec-div=true --prec-sqrt=true -split-compile=0 --ftz=false -Wno-deprecated-declarations) # --split-compile-extended=1
    ELSEIF (CMAKE_BUILD_TYPE MATCHES "Debug")
        LIST(APPEND COMPILER_EXTENSIONS_CUDA -G -g --device-debug --no-compress)
        LIST(APPEND LINK_FLAGS_CUDA --debug --device-stack-protector --preserve-relocs --keep-system-libraries --ignore-host-info)
    ENDIF ()
    IF (USE_LTO)
        LIST(APPEND COMPILER_EXTENSIONS_CUDA -Wl,--lto --gen-opt-lto) # Not sure if this should be added --gpu-architecture=lto_${CMAKE_CUDA_ARCHITECTURES} --fatbin --no-compress
        LIST(APPEND LINK_FLAGS_CUDA --link-time-opt --split-compile=${NCPU} --split-compile-extended=1 -code=lto_${CMAKE_CUDA_ARCHITECTURES})
    ENDIF ()
    FOREACH (OPT IN LISTS COMPILER_EXTENSIONS_CUDA)
        ADD_COMPILE_OPTIONS("$<$<COMPILE_LANGUAGE:CUDA>:${OPT}>")
    ENDFOREACH ()
    # CMAKE_PEDANTIC_FLAGS is not supported by nvcc
    IF (${CMAKE_CUDA_HOST_COMPILER} MATCHES icpx)
        FOREACH (OPT IN LISTS COMPILER_EXTENSIONS COMPILER_EXTENSIONS_ICPX CXX_OPTIMIZATION_FLAGS CXX_OPTIMIZATION_FLAGS_ICPX)
            ADD_COMPILE_OPTIONS("$<$<COMPILE_LANGUAGE:CUDA>:-Xcompiler=${OPT}>")
        ENDFOREACH ()
        FOREACH (OPT IN LISTS COMPILER_EXTENSIONS COMPILER_EXTENSIONS_ICPX LINKER_OPTIMIZATION_FLAGS LINKER_OPTIMIZATION_FLAGS_ICPX CXX_OPTIMIZATION_FLAGS LINK_FLAGS_CUDA)
            ADD_LINK_OPTIONS("$<$<COMPILE_LANGUAGE:CUDA>:-Xlinker=${OPT}>")
        ENDFOREACH ()
        # IF (OMP_OFFLOAD)
        #    ADD_COMPILE_OPTIONS("$<$<COMPILE_LANGUAGE:CXX>:--cuda-gpu-arch=sm_${CMAKE_CUDA_ARCHITECTURES}>") # For Intel LLVM compiler OMP target
        # ENDIF()
    ELSE ()
        FOREACH (OPT IN LISTS COMPILER_EXTENSIONS COMPILER_EXTENSIONS_GCC CXX_OPTIMIZATION_FLAGS CXX_OPTIMIZATION_FLAGS_GCC)
            ADD_COMPILE_OPTIONS("$<$<COMPILE_LANGUAGE:CUDA>:-Xcompiler=${OPT}>")
        ENDFOREACH ()
        FOREACH (OPT IN LISTS COMPILER_EXTENSIONS COMPILER_EXTENSIONS_GCC LINKER_OPTIMIZATION_FLAGS LINKER_OPTIMIZATION_FLAGS_GCC CXX_OPTIMIZATION_FLAGS LINK_FLAGS_CUDA)
            ADD_LINK_OPTIONS("$<$<COMPILE_LANGUAGE:CUDA>:-Xlinker=${OPT}>")
        ENDFOREACH ()
    ENDIF ()
    IF (NOT ${CUDA_SDK_ROOT_DIR} MATCHES "/")
        SET(CUDA_SDK_ROOT_DIR ${CUDA_TOOLKIT_ROOT_DIR})
    ENDIF ()
    # ADD_COMPILE_OPTIONS("$<$<COMPILE_LANGUAGE:CUDA>:-Xcompiler=-fno-lto>") # TODO Check why BFD linker crashes when seeing CUDA fatbinData segments
    ADD_COMPILE_OPTIONS("$<$<COMPILE_LANGUAGE:CUDA>:-Xcompiler=-Wno-error>")
    ADD_COMPILE_OPTIONS("$<$<COMPILE_LANGUAGE:CUDA>:--diag-suppress=3012>")
    LIST(APPEND CMAKE_CUDA_LINKER_FLAGS ${LINK_FLAGS_CUDA})
ENDIF ()

OPTION(ENABLE_OPENCL "Use OpenCL and ViennaCL (deprecated, not maintained)" OFF)
IF (ENABLE_OPENCL)
    ADD_DEFINITIONS(-DENABLE_OPENCL -DCL_TARGET_OPENCL_VERSION=220 -DCL_HPP_TARGET_OPENCL_VERSION=220 -DVIENNACL_WITH_OPENCL)
    FIND_PACKAGE(OpenCL REQUIRED)
    INCLUDE_DIRECTORIES("/usr/local/cuda/include")
ENDIF (ENABLE_OPENCL)

SET(MAGMA_DIR "/usr/local/magma" CACHE STRING "Path to directory under which include and lib subfolders contain MAGMA files.")
LINK_DIRECTORIES(BEFORE ${MAGMA_DIR}/lib)
INCLUDE_DIRECTORIES("${ONEAPI_ROOT}/tbb/latest/include" "/usr/include/hdf5/serial" "${MAGMA_DIR}/include") # "${ONEAPI_ROOT}/mpi/latest/include"
IF(ENABLE_OPENCL)
    INCLUDE_DIRECTORIES("${ONEAPI_ROOT}/compiler/latest/include/sycl")
ENDIF()

SET(MKL_INTERFACE_FULL "intel_ilp64" CACHE STRING "MKL_INTERFACE_FULL")
SET(MKL_LINK "static" CACHE STRING "MKL_LINK" FORCE)
SET(OpenMP_iomp_LIBRARY "${ONEAPI_ROOT}/compiler/latest/linux/compiler/lib/intel64_lin/libiomp5.a" CACHE STRING "OpenMP_iomp_LIBRARY")
IF (USE_INTEL_OPENMP)
    SET(OpenMP_CXX_LIB_NAMES "iomp" CACHE STRING "OpenMP_CXX_LIB_NAMES")
ELSE ()
    SET(OpenMP_CXX_LIB_NAMES "omp5" CACHE STRING "OpenMP_CXX_LIB_NAMES")
ENDIF ()

OPTION(EXPERIMENTAL_FEATURES "Enable experimental features" OFF)
IF (EXPERIMENTAL_FEATURES)
    ADD_DEFINITIONS(-DEXPERIMENTAL_FEATURES)
    SET(MATLAB_INCLUDE_DIR "/mnt/slowstore/usr/local/MATLAB/R2021b/extern/include/")
    SET(MATLAB_LINK_DIR "/mnt/slowstore/usr/local/MATLAB/R2021b/extern/bin/glnxa64/")
    EXECUTE_PROCESS(COMMAND python3-config --ldflags --cflags OUTPUT_STRIP_TRAILING_WHITESPACE OUTPUT_VARIABLE PY_CLDFLAGS)
    STRING(REGEX REPLACE "[\n ]" "" PY_CLDFLAGS "${PY_CLDFLAGS}")
    # SET(PY_CLDFLAGS "-fPIC ${PY_CLDFLAGS}")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${PY_CLDFLAGS}")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${PY_CLDFLAGS}")
    LIST(APPEND CMAKE_EXE_LINKER_FLAGS ${PY_CLDFLAGS})
    LIST(APPEND CMAKE_SHARED_LINKER_FLAGS ${PY_CLDFLAGS})
ENDIF (EXPERIMENTAL_FEATURES)


IF (NOT WITH_TESTS)
    SET(WITH_TESTS ".*")
ENDIF ()

IF (NOT WITH_TOOLS)
    SET(WITH_TOOLS ".*")
ENDIF ()

LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")

if ($ENV{HOSTNAME} MATCHES "sl[0-9]+$")
    LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/host_config/sl/cmake/")
endif ()

FIND_PACKAGE(TBB REQUIRED)
FIND_PACKAGE(Armadillo REQUIRED)
FIND_PACKAGE(PostgreSQL REQUIRED)
FIND_PACKAGE(Ginkgo REQUIRED)
FIND_PACKAGE(LibPQXX REQUIRED)
FIND_PACKAGE(MKL CONFIG REQUIRED PATHS $ENV{MKLROOT})
IF (ENABLE_OPENCL)
    FIND_PACKAGE(IntelSYCL)
ENDIF ()
INCLUDE_DIRECTORIES(${MKL_INCLUDE_DIRS} "${ONEAPI_ROOT}/compiler/latest/include")
# FIND_PACKAGE(Bandicoot REQUIRED)

SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})
SET(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR})

MESSAGE(STATUS "BUILD_TYPE: " ${CMAKE_BUILD_TYPE})
MESSAGE(STATUS "CMAKE_CXX_COMPILER: " ${CMAKE_CXX_COMPILER})

# Workaround for QtCreator to show headers
SET(IDE QT_CREATOR)
SET(SVRROOT_DIR SVRRoot)

IF (NOT DEFINED MODULES)
    SET(MODULES SVRWeb SVRDaemon SVRBusiness OnlineSVR SVRPersist SVRCommon SVRModel SVRFix)
ELSE ()
    LIST(APPEND MODULES SVRBusiness OnlineSVR SVRPersist SVRCommon SVRModel)
ENDIF ()

IF (WITH_TESTS)
    LIST(APPEND MODULES SVRBusiness-tests SVRDaemon-blackbox-tests)
ENDIF ()

IF (WITH_TOOLS)
    LIST(APPEND MODULES zTools)
ENDIF ()

PKG_CHECK_MODULES(JEMALLOC jemalloc)
PKG_SEARCH_MODULE(JEMALLOC REQUIRED jemalloc)
INCLUDE_DIRECTORIES(${JEMALLOC_INCLUDE_DIRS})

IF (APPLE)
    SET(CMAKE_MACOSX_RPATH 1)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-c++11-narrowing")
ENDIF ()

SET(Boost_MIN_VERSION 1.74)
SET(PQXX_LIBRARIES -lpqxx -lpq)
LINK_LIBRARIES(highwayhash) # hdf5_serial

FOREACH (module ${MODULES})
    INCLUDE_DIRECTORIES(${SVRROOT_DIR}/${module}/include)
    ADD_SUBDIRECTORY(${SVRROOT_DIR}/${module})
    SET(DIR_TEST_MODULES)
    GET_PROPERTY(DIR_TEST_MODULES DIRECTORY ${CMAKE_SOURCE_DIR}/${SVRROOT_DIR}/${module} PROPERTY TEST_MODULES)
    IF (DIR_TEST_MODULES)
        SET(TEST_MODULES ${TEST_MODULES} ${DIR_TEST_MODULES})
    ENDIF ()
ENDFOREACH (module)

if (WITH_BENCHMARKS)
    message("********************************************************************************")
    message("*  Registering the following benchmarks:")
    ADD_SUBDIRECTORY(${SVRROOT_DIR}/SVRBenchmarks)
    message("********************************************************************************")
endif ()

if (WITH_TESTS)
    ENABLE_TESTING()
    MESSAGE("********************************************************************************")
    MESSAGE("*  Registering the following tests:")
    FOREACH (MODULE ${TEST_MODULES})
        IF ("${MODULE}" MATCHES "${WITH_TESTS}")
            MESSAGE("* ~~ ${MODULE}")
            ADD_TEST(NAME ${MODULE} COMMAND ${MODULE})

            IF ("${MODULE}" MATCHES "SVRBusiness-tests")
                ADD_TEST(NAME ${MODULE}-async COMMAND "${MODULE}" "-d async")
                MESSAGE("* ~~ ${MODULE}-async")
            ENDIF ()
        ENDIF ()
    ENDFOREACH ()
    MESSAGE("*  Use make test to run the tests")
    MESSAGE("********************************************************************************")
ENDIF ()

