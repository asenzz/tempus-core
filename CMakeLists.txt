UNSET(ENV{CFLAGS})
UNSET(ENV{CXXFLAGS})
UNSET(ENV{LDFLAGS})

CMAKE_MINIMUM_REQUIRED(VERSION 3.10)
ENABLE_LANGUAGE(CUDA)
FIND_PROGRAM(PROGRAM_CCACHE ccache)
IF(PROGRAM_CCACHE)
    SET(CMAKE_CXX_COMPILER_LAUNCHER ${PROGRAM_CCACHE})
    SET(CMAKE_C_COMPILER_LAUNCHER ${PROGRAM_CCACHE})
    SET(CMAKE_CUDA_COMPILER_LAUNCHER ${PROGRAM_CCACHE})
    SET(CMAKE_OPENCL_COMPILER_LAUNCHER ${PROGRAM_CCACHE})
ENDIF()

OPTION(USE_INTEL_COMPILER "Use Intel's ICX compiler")
FIND_PROGRAM(PROGRAM_ICPX icpx)
IF(PROGRAM_ICPX AND USE_INTEL_COMPILER)
    MESSAGE("Found Intel compiler at ${PROGRAM_ICPX}")
    SET(USE_INTEL_COMPILER ON CACHE BOOL "USE_INTEL_COMPILER")
    SET(CMAKE_CXX_COMPILER ${PROGRAM_ICPX} CACHE STRING "CMAKE_CXX_COMPILER")
    FIND_PROGRAM(PROGRAM_ICX icx REQUIRED)
    SET(CMAKE_C_COMPILER ${PROGRAM_ICX} CACHE STRING "CMAKE_C_COMPILER")
    CMAKE_PATH(GET PROGRAM_ICX PARENT_PATH ICX_DIR)
    SET(CMAKE_LINKER "${ICX_DIR}/compiler/ld.lld" CACHE STRING "CMAKE_LINKER")
ENDIF()

IF(USE_CUDA)
    PROJECT(SVR LANGUAGES CXX CUDA)
ELSE()
    PROJECT(SVR CXX)
ENDIF()

SET(POSITION_INDEPENDENT_CODE ON)

INCLUDE(ProcessorCount)
ProcessorCount(NCPU)
# SET(CMAKE_BUILD_TYPE "Release" CACHE STRING "CMAKE_BUILD_TYPE")
SET(CMAKE_CXX_STANDARD "17" CACHE STRING "CMAKE_CXX_STANDARD")
SET(CMAKE_PEDANTIC_FLAGS -pedantic -Wall -Werror)

IF(WIN32 OR CYGWIN)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DGTEST_OS_CYGWIN=1")
ENDIF()

SET(COMPILER_EXTENSIONS -std=c++17)
SET(COMPILER_EXTENSIONS_CC -std=c17) # Deprecated -fcilkplus -lcilkrts
SET(COMPILER_EXTENSIONS_ICX -pc80 -static -Wno-pass-failed -Wno-unsupported-floating-point-opt -fdiagnostics-show-option) # ,nvptx64-nvidia-cuda -qnextgen-diag -fimf-precision=high
SET(COMPILER_EXTENSIONS_GCC -fopenmp -ggdb)

IF (CMAKE_BUILD_TYPE MATCHES "Rel")
    # SET(CMAKE_INTERPROCEDURAL_OPTIMIZATION ON) # ICXP segfaults
    SET(CXX_OPTIMIZATION_FLAGS -march=native -mtune=native -m64 -mstackrealign -mmovbe -malign-double -mfpmath=sse -funroll-loops -fPIC -O3) # speed test with -fsplit-stack
    SET(CXX_OPTIMIZATION_FLAGS_ICX -funified-lto -flto=full -fslp-vectorize -freroll-loops -fjump-tables -qopt-mem-layout-trans=4 -fma -Wno-overriding-option -fp-model=precise -fp-speculation=safe -fimf-use-svml=true -mcmodel=large -mbranches-within-32B-boundaries -inline-level=2 -qopt-multiple-gather-scatter-by-shuffles -ffp-contract=fast -foptimize-sibling-calls -vec -fvec-peel-loops -fvec-remainder-loops -fvec-with-mask -qopenmp -fopenmp=libiomp5 -fopenmp-targets=spir64_x86_64 -fopenmp-target-simd -fopenmp-target-loopopt -fopenmp-target-buffers=4GB -fopenmp-concurrent-host-device-compile -finline -qopt-matmul -qopt-dynamic-align -qopt-jump-tables -qopt-prefetch -O3) # Test precision with -ffp-eval-method=extended
    SET(CXX_OPTIMIZATION_FLAGS_GCC -flto -fno-semantic-interposition -ftracer -fbranch-target-load-optimize -fbranch-target-load-optimize2 -funswitch-loops -finline-limit=6000 -fprefetch-loop-arrays -fmerge-all-constants -mfma) # -funsafe-math-optimizations -fno-math-errno -fno-trapping-math -fforce-mem -fforce-addr
    LIST(APPEND LINKER_OPTIMIZATION_FLAGS -Wl,--icf=safe)
    LIST(APPEND LINKER_OPTIMIZATION_FLAGS_ICX -funified-lto -flto=full -Wl,--lto-O3 -Wl,--lto-whole-program-visibility -Wl,--no-lto-legacy-pass-manager -Wl,--lto=full -qopenmp-link=static -fuse-ld=lld -Wl,--no-fat-lto-objects -Wl,--lto-CGO3 -Wl,--apply-dynamic-relocs -Wl,-z,muldefs -fdiagnostics-show-option -qopenmp -fopenmp=libiomp5 -fopenmp-targets=spir64_x86_64 --offload-arch=native -Xopenmp-target-backend=spir64_x86_64 "-device=cpu -march=sse4.2" -static-libstdc++ -stdlib=libstdc++)
    LIST(APPEND LINKER_OPTIMIZATION_FLAGS_GCC -fwhole-program -flto-partition=one -flto)
    SET(ENV {MKL_ENABLE_INSTRUCTIONS} "AVX2")
ENDIF()

IF (CMAKE_BUILD_TYPE MATCHES "Debug")
    SET(LSAN_BLACKLIST "lsan-blacklist.txt" CACHE STRING "")
    SET(UBSAN_BLACKLIST "ubsan-blacklist.txt" CACHE STRING "")
    SET(SANITIZE address CACHE STRING address)
    SET_PROPERTY(CACHE SANITIZE PROPERTY STRINGS address thread undefined "")
    SET(CXX_OPTIMIZATION_FLAGS -DDEBUG_BUILD -ggdb -fno-omit-frame-pointer -fstack-protector-all -fstack-clash-protection) # -fsanitize-blacklist=${LSAN_BLACKLIST}
    SET(CXX_OPTIMIZATION_FLAGS_ICX -debug extended -g3 -fp-model=strict -pc80 -fimf-precision=high -fimf-use-svml=false -qopenmp -fstack-security-check)
    SET(CXX_OPTIMIZATION_FLAGS_GCC -fharden-compares -fharden-conditional-branches -fopenmp -finstrument-functions) # -fvtv-debug -fvtable-verify=std
    LIST(APPEND LINKER_OPTIMIZATION_FLAGS) # Memory profilers -lduma -ldmallocthcxx -ldmallocthcxx
    LIST(APPEND LINKER_OPTIMIZATION_FLAGS_ICX -debug extended -g3 -static-libstdc++ -stdlib=libstdc++) # -fuse-ld=lld -qopenmp -fopenmp=libiomp5
    LIST(APPEND LINKER_OPTIMIZATION_FLAGS_GCC -fopenmp -liomp5)
    IF (SANITIZE)
        LIST(APPEND CXX_OPTIMIZATION_FLAGS -fno-common -fsanitize=${SANITIZE} -fno-sanitize-recover=all -DSANITIZE)
        LIST(APPEND CXX_OPTIMIZATION_FLAGS_GCC --param=max-vartrack-size=100000000)
        LIST(APPEND LINKER_OPTIMIZATION_FLAGS_ICX)
        LIST(APPEND LINKER_OPTIMIZATION_FLAGS -fsanitize=${SANITIZE})
        LIST(APPEND LINKER_OPTIMIZATION_FLAGS_ICX -static-libsan)
        SET(ENV{ASAN_OPTIONS} "protect_shadow_gap=0:replace_intrin=0:detect_leaks=0")
    ENDIF()
ENDIF()

SET(POSITION_INDEPENDENT_CODE ON)
#FIND_PROGRAM(PROGRAM_MOLD mold)
#IF(PROGRAM_MOLD)
#    LIST(APPEND LINKER_OPTIMIZATION_FLAGS_GCC -fuse-ld=mold)
#ENDIF()
ADD_DEFINITIONS(-DARMA_USE_FFTW3 -DARMA_ALLOW_FAKE_GCC -DSVR_ENABLE_DEBUGGING -DBOOST_MATH_NO_LONG_DOUBLE_MATH_FUNCTIONS=1 -DMAGMA_NOWARNING)

OPTION(VALGRIND_BUILD "Build for testing with Valgrind")
IF(VALGRIND_BUILD)
    ADD_DEFINITIONS(-DVALGRIND_BUILD)
ENDIF()

OPTION(PRODUCTION_BUILD "Generate maximum performance build for use in well tested production setting." OFF)
IF(PRODUCTION_BUILD)
    ADD_COMPILE_DEFINITIONS(-DCOOT_NO_DEBUG -DARMA_NO_DEBUG -DPRODUCTION_BUILD -DNDEBUG -DNDEBUG)
ELSE()
    LIST(PREPEND CXX_OPTIMIZATION_FLAGS_ICX -g3 -debug extended)
ENDIF()

OPTION(PROFILE_OPTIMIZE "Generate profiling instrumentation code" OFF)
IF(PROFILE_OPTIMIZE)
    IF (USE_INTEL_COMPILER)
        LIST(APPEND COMPILER_EXTENSIONS_ICX -fprofile-sample-generate -debug extended -g3)
    ELSE()
        LIST(APPEND COMPILER_EXTENSIONS_GCC -fprofile-generate)
    ENDIF()
    LIST(APPEND COMPILER_EXTENSIONS -fno-omit-frame-pointer)
ELSE()
    IF (CMAKE_BUILD_TYPE MATCHES "Rel")
        LIST(APPEND COMPILER_EXTENSIONS -fomit-frame-pointer)
    ENDIF()
ENDIF()

IF (USE_INTEL_COMPILER)
    FOREACH (OPT IN LISTS CMAKE_PEDANTIC_FLAGS COMPILER_EXTENSIONS COMPILER_EXTENSIONS_ICX CXX_OPTIMIZATION_FLAGS CXX_OPTIMIZATION_FLAGS_ICX)
        ADD_COMPILE_OPTIONS("$<$<COMPILE_LANGUAGE:CXX>:${OPT}>")
    ENDFOREACH()
    FOREACH (OPT IN LISTS CMAKE_PEDANTIC_FLAGS COMPILER_EXTENSIONS_CC COMPILER_EXTENSIONS_ICX CXX_OPTIMIZATION_FLAGS CXX_OPTIMIZATION_FLAGS_ICX)
        ADD_COMPILE_OPTIONS("$<$<COMPILE_LANGUAGE:C>:${OPT}>")
    ENDFOREACH()
    FOREACH (OPT IN LISTS LINKER_OPTIMIZATION_FLAGS LINKER_OPTIMIZATION_FLAGS_ICX)
        ADD_LINK_OPTIONS("$<$<COMPILE_LANGUAGE:CXX>:${OPT}>")
    ENDFOREACH()
    FOREACH (OPT IN LISTS LINKER_OPTIMIZATION_FLAGS LINKER_OPTIMIZATION_FLAGS_ICX)
        ADD_LINK_OPTIONS("$<$<COMPILE_LANGUAGE:C>:${OPT}>")
    ENDFOREACH()
ELSE()
    FOREACH (OPT IN LISTS CMAKE_PEDANTIC_FLAGS COMPILER_EXTENSIONS COMPILER_EXTENSIONS_GCC CXX_OPTIMIZATION_FLAGS CXX_OPTIMIZATION_FLAGS_GCC)
        ADD_COMPILE_OPTIONS("$<$<COMPILE_LANGUAGE:CXX>:${OPT}>")
    ENDFOREACH()
    FOREACH (OPT IN LISTS CMAKE_PEDANTIC_FLAGS COMPILER_EXTENSIONS_CC COMPILER_EXTENSIONS_GCC CXX_OPTIMIZATION_FLAGS CXX_OPTIMIZATION_FLAGS_GCC)
        ADD_COMPILE_OPTIONS("$<$<COMPILE_LANGUAGE:C>:${OPT}>")
    ENDFOREACH()
    FOREACH (OPT IN LISTS LINKER_OPTIMIZATION_FLAGS LINKER_OPTIMIZATION_FLAGS_GCC CXX_OPTIMIZATION_FLAGS COMPILER_EXTENSIONS COMPILER_EXTENSIONS_GCC)
        ADD_LINK_OPTIONS("$<$<COMPILE_LANGUAGE:CXX>:${OPT}>")
    ENDFOREACH()
    FOREACH (OPT IN LISTS LINKER_OPTIMIZATION_FLAGS LINKER_OPTIMIZATION_FLAGS_GCC C_OPTIMIZATION_FLAGS COMPILER_EXTENSIONS COMPILER_EXTENSIONS_CC COMPILER_EXTENSIONS_GCC)
        ADD_LINK_OPTIONS("$<$<COMPILE_LANGUAGE:C>:${OPT}>")
    ENDFOREACH()
ENDIF()

FILE(GLOB_RECURSE PERF_DATA_FILES FOLLOW_SYMLINKS "*.perf.data")
FOREACH (PERF_DATA IN LISTS PERF_DATA_FILES)
    IF(EXISTS ${PERF_DATA} AND EXISTS ${PERF_DATA}.freq.prof AND EXISTS ${PERF_DATA}.misp.prof)
        MESSAGE("Found perf data in ${PERF_DATA}")
        ADD_COMPILE_OPTIONS("$<$<COMPILE_LANGUAGE:CXX>:-fprofile-sample-use=${PERF_DATA}.freq.prof>")
        ADD_COMPILE_OPTIONS("$<$<COMPILE_LANGUAGE:CXX>:-mllvm>")
        ADD_COMPILE_OPTIONS("$<$<COMPILE_LANGUAGE:CXX>:-unpredictable-hints-file=${PERF_DATA}.misp.prof>")
        ADD_COMPILE_OPTIONS("$<$<COMPILE_LANGUAGE:C>:-fprofile-sample-use=${PERF_DATA}.freq.prof -mllvm -unpredictable-hints-file=${PERF_DATA}.misp.prof>")
        ADD_COMPILE_OPTIONS("$<$<COMPILE_LANGUAGE:CUDA>:-Xcompiler=-fprofile-use=${PERF_DATA}.freq.prof -unpredictable-hints-file=${PERF_DATA}.misp.prof>")
    ELSE()
        MESSAGE("Complete perf data not found in ${PERF_DATA}, ${PERF_DATA}.freq.prof and ${PERF_DATA}.misp.prof")
    ENDIF()
ENDFOREACH()

OPTION(USE_CUDA "Compile for CUDA system." ON)
if (USE_CUDA)
    UNSET(ENV{CFLAGS})
    UNSET(ENV{CXXFLAGS})
    UNSET(ENV{LDFLAGS})
    FIND_PACKAGE(CUDAToolkit)
    LINK_DIRECTORIES(${CUDAToolkit_LIBRARY_DIR})
    ADD_DEFINITIONS(-DUSE_CUDA)
    # ADD_DEFINITIONS(-DVIENNACL_WITH_CUDA) # ViennaCL is DEPRECATED and to be removed
    SET(CUDA_ARCH_LIST Auto CACHE STRING "List of CUDA architectures (e.g. Pascal, Volta, etc) or \
                                        compute capability versions (6.1, 7.0, etc) to generate code for. \
                                        Set to Auto for automatic detection (default)."
    )
    SET(CMAKE_CUDA_ARCHITECTURES "70" CACHE STRING "")
    SET(CUDA_ARCH_LIST "70" CACHE STRING "")
    INCLUDE_DIRECTORIES(${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES} ${CUDAToolkit_INCLUDE_DIRS})

    SET(CMAKE_CUDA_COMPILER "nvcc" CACHE STRING "CMAKE_CUDA_COMPILER")
    SET(CMAKE_CUDA_HOST_COMPILER "g++" CACHE STRING "CUDA host compiler")
    SET(CUDA_HOST_COMPILER ${CMAKE_CUDA_HOST_COMPILER} CACHE STRING "CUDA_HOST_COMPILER")
    SET(CUDA_USE_STATIC_RUNTIME ON)
    SET(COMPILER_EXTENSIONS_CUDA -ccbin=${CMAKE_CUDA_HOST_COMPILER} -extrawarn -DCUDACC --forward-unknown-opts -lineinfo --use-local-env -allow-unsupported-compiler --extended-lambda --threads=${NCPU} --default-stream=per-thread --std=c++17)
    IF (CMAKE_BUILD_TYPE MATCHES "Rel")
        LIST(APPEND -O3 --extra-device-vectorization --expt-relaxed-constexpr --gen-opt-lto --fmad=true)
    ENDIF()
    FOREACH(OPT IN LISTS COMPILER_EXTENSIONS_CUDA)
       ADD_COMPILE_OPTIONS("$<$<COMPILE_LANGUAGE:CUDA>:${OPT}>")
    ENDFOREACH()
    FOREACH(OPT IN LISTS COMPILER_EXTENSIONS COMPILER_EXTENSIONS_GCC CXX_OPTIMIZATION_FLAGS CXX_OPTIMIZATION_FLAGS_GCC)
        ADD_COMPILE_OPTIONS("$<$<COMPILE_LANGUAGE:CUDA>:-Xcompiler=${OPT}>")
    ENDFOREACH()
    FOREACH (OPT IN LISTS LINKER_OPTIMIZATION_FLAGS LINKER_OPTIMIZATION_FLAGS_GCC CXX_OPTIMIZATION_FLAGS COMPILER_EXTENSIONS COMPILER_EXTENSIONS_GCC)
        ADD_LINK_OPTIONS("$<$<COMPILE_LANGUAGE:CUDA>:-Xlinker=${OPT}>")
    ENDFOREACH()
    ADD_COMPILE_OPTIONS("$<$<COMPILE_LANGUAGE:CUDA>:-Xcompiler=-fno-lto>") # BFD linker crashes when seeing CUDA fatbinData segments
    #ADD_COMPILE_OPTIONS("$<$<COMPILE_LANGUAGE:CUDA>:-Xcompiler=--cuda-gpu-arch=sm_${CMAKE_CUDA_ARCHITECTURES}>") # For Intel compiler

    IF (NOT ${CUDA_SDK_ROOT_DIR} MATCHES "/")
        SET(CUDA_SDK_ROOT_DIR ${CUDA_TOOLKIT_ROOT_DIR})
    ENDIF()
ENDIF()

OPTION(ENABLE_OPENCL "Use the Vienna OpenCL backend for BLAS" ON)
IF(ENABLE_OPENCL)
    ADD_DEFINITIONS(-DVIENNACL_WITH_OPENCL -DCL_TARGET_OPENCL_VERSION=220 -DCL_HPP_TARGET_OPENCL_VERSION=220)
    FIND_PACKAGE(OpenCL REQUIRED)
    INCLUDE_DIRECTORIES("/usr/local/cuda/include")
ENDIF(ENABLE_OPENCL)

INCLUDE_DIRECTORIES("/opt/intel/oneapi/tbb/latest/include" "/usr/include/hdf5/serial")

SET(MKL_INTERFACE_FULL "intel_lp64" CACHE STRING "MKL_INTERFACE_FULL" FORCE)
SET(MKL_LINK "static" CACHE STRING "MKL_LINK" FORCE)
SET(OpenMP_iomp_LIBRARY "/opt/intel/oneapi/compiler/latest/linux/compiler/lib/intel64_lin/libiomp5.a" CACHE STRING "OpenMP_iomp_LIBRARY")
SET(OpenMP_CXX_LIB_NAMES "iomp;pthread" CACHE STRING "OpenMP_CXX_LIB_NAMES")

OPTION(EXPERIMENTAL_FEATURES "Enable experimental features" OFF)
IF(EXPERIMENTAL_FEATURES)
    ADD_DEFINITIONS(-DEXPERIMENTAL_FEATURES)
    SET(MATLAB_INCLUDE_DIR "/mnt/slowstore/usr/local/MATLAB/R2021b/extern/include/")
    SET(MATLAB_LINK_DIR "/mnt/slowstore/usr/local/MATLAB/R2021b/extern/bin/glnxa64/")
    EXECUTE_PROCESS(COMMAND python3-config --ldflags --cflags OUTPUT_STRIP_TRAILING_WHITESPACE OUTPUT_VARIABLE PY_CLDFLAGS)
    STRING(REGEX REPLACE "[\n ]" "" PY_CLDFLAGS "${PY_CLDFLAGS}")
    # SET(PY_CLDFLAGS "-fPIC ${PY_CLDFLAGS}")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${PY_CLDFLAGS}")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${PY_CLDFLAGS}")
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${PY_CLDFLAGS}")
    SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${PY_CLDFLAGS}")
    SET(CMAKE_STATIC_LINKER_FLAGS "${CMAKE_STATIC_LINKER_FLAGS} ${PY_CLDFLAGS}")
ENDIF(EXPERIMENTAL_FEATURES)


if(NOT WITH_TESTS)
    SET(WITH_TESTS ".*")
endif()

if(NOT WITH_TOOLS)
    SET(WITH_TOOLS ".*")
endif()

LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")

if($ENV{HOSTNAME} MATCHES "sl[0-9]+$")
    LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/host_config/sl/cmake/")
endif()

FIND_PACKAGE(TBB REQUIRED)
FIND_PACKAGE(Armadillo REQUIRED)
FIND_PACKAGE(MKL CONFIG REQUIRED PATHS $ENV{MKLROOT})
FIND_PACKAGE(PostgreSQL REQUIRED)
FIND_PACKAGE(LibPQXX REQUIRED)
# FIND_PACKAGE(Bandicoot REQUIRED)

SET(ENABLE_OMP_OFFLOAD ON CACHE BOOL "ENABLE_OMP_OFFLOAD" FORCE)
SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})
SET(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR})

MESSAGE(STATUS "BUILD_TYPE: " ${CMAKE_BUILD_TYPE} )
MESSAGE(STATUS "CMAKE_BINARY_DIR " ${CMAKE_BINARY_DIR} )

# Workaround for QtCreator to show headers
SET(IDE QT_CREATOR)
SET(SVRROOT_DIR SVRRoot)

IF(NOT DEFINED MODULES)
    SET(MODULES SVRWeb SVRDaemon SVRBusiness OnlineSVR SVRPersist SVRCommon SVRModel SVRFix)
ELSE()
    LIST(APPEND MODULES SVRBusiness OnlineSVR SVRPersist SVRCommon SVRModel)
ENDIF()

IF(WITH_TESTS)
    LIST(APPEND MODULES SVRBusiness-tests SVRDaemon-blackbox-tests)
ENDIF()

IF(WITH_TOOLS)
    LIST(APPEND MODULES zTools)
ENDIF()
SET(LIBS_BUILD_TYPE SHARED)

FIND_PACKAGE(PkgConfig REQUIRED)
PKG_CHECK_MODULES (JEMALLOC jemalloc)

PKG_SEARCH_MODULE(JEMALLOC REQUIRED jemalloc)
INCLUDE_DIRECTORIES(${JEMALLOC_INCLUDE_DIRS})

IF(APPLE)
    SET(CMAKE_MACOSX_RPATH 1)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-c++11-narrowing")
ENDIF()


SET(Boost_MIN_VERSION 1.74)

SET(DEPLIBS_DIR /libs)
SET(PQXX_LIBRARIES -lpqxx -lpq)

FOREACH(module ${MODULES})
    INCLUDE_DIRECTORIES(${SVRROOT_DIR}/${module}/include)
    ADD_SUBDIRECTORY(${SVRROOT_DIR}/${module})
    SET(DIR_TEST_MODULES)
    GET_PROPERTY(DIR_TEST_MODULES DIRECTORY ${CMAKE_SOURCE_DIR}/${SVRROOT_DIR}/${module} PROPERTY TEST_MODULES)
    if(DIR_TEST_MODULES)
        SET(TEST_MODULES ${TEST_MODULES} ${DIR_TEST_MODULES})
    endif()
ENDFOREACH(module)

if(WITH_BENCHMARKS)
    message("********************************************************************************")
    message("*  Registering the following benchmarks:")
    ADD_SUBDIRECTORY(${SVRROOT_DIR}/SVRBenchmarks)
    message("********************************************************************************")
endif()

if(WITH_TESTS)
    ENABLE_TESTING()
    MESSAGE("********************************************************************************")
    MESSAGE("*  Registering the following tests:")
    FOREACH(MODULE ${TEST_MODULES})
        IF("${MODULE}" MATCHES "${WITH_TESTS}")
            MESSAGE("* ~~ ${MODULE}")
            ADD_TEST(NAME ${MODULE} COMMAND ${MODULE})

            IF("${MODULE}" MATCHES "SVRBusiness-tests")
                ADD_TEST(NAME ${MODULE}-async COMMAND "${MODULE}" "-d async" )
                MESSAGE("* ~~ ${MODULE}-async")
            ENDIF()
        ENDIF()
    ENDFOREACH()
    MESSAGE("*  Use make test to run the tests")
    MESSAGE("********************************************************************************")
ENDIF()

LINK_DIRECTORIES(/lib /libexec /usr/lib /usr/lib/libexec /usr/local/lib /usr/local/libexec)
